{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///external \"react\"","webpack:///./src/lib/ECS/util/entityLoop.ts","webpack:///./src/lib/ECS/Group.ts","webpack:///./src/lib/ECS/util/spliceOne.ts","webpack:///./src/lib/ECS/Entity.ts","webpack:///./src/lib/ObjectPool/ObjectPool.ts","webpack:///./src/lib/CanvasAPI/CanvasAPI.ts","webpack:///./src/lib/GameCanvas/SelectedBox/SelectedBox.ts","webpack:///./src/lib/GameCanvas/selectionUtils/isPosInsideCircle.ts","webpack:///./src/lib/GameCanvas/selectionUtils/getShapesFromClick.ts","webpack:///./src/lib/GameCanvas/selectionUtils/getShapesInSelectionBox.ts","webpack:///./src/lib/GameCanvas/GameCanvas.tsx","webpack:///./src/lib/Engine/Engine.ts","webpack:///./src/index.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;AClFA,gD;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACgB;AAChB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC,EAAE;;;ACrBH,cAAc,SAAI,IAAI,SAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,MAAM,gBAAgB;AACzC;AACA;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA,gBAAgB,SAAI,IAAI,SAAI;AAC5B,4BAA4B,sBAAsB;AAClD;AACA;AAC2C;AAC3C;AACA;AACA,kCAAkC,eAAe;AACjD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2BAA2B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,UAAU;AACd;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACe,mDAAK,EAAC;AACrB;AACA;AACA;AACA;AACA;;;AClFA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,4DAAS,EAAC;;;ACbG;AACe;AACF;AACzC,IAAI,aAAM;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,UAAU;AAClB;AACA,SAAS;AACT,QAAQ,SAAK;AACb;AACA;AACA;AACA,8BAA8B,gBAAgB;AAC9C;AACA,QAAQ,SAAK;AACb,oBAAoB,SAAK;AACzB;AACA;AACA;AACA;AACA,8BAA8B,gBAAgB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,SAAK;AACb;AACA,6BAA6B,SAAK;AAClC,iBAAiB,SAAK;AACtB;AACA;AACA,wBAAwB,SAAK;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,SAAK;AAClC,iBAAiB,SAAK;AACtB;AACA;AACA,wBAAwB,SAAK;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,gBAAgB,aAAM;AACP,4DAAM,EAAC;;;AClJtB;AACA;AACA,4CAA4C,yBAAyB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACc,oEAAU,EAAC;;;;;;;AC/C1B;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAI,IAAI,SAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,eAAe;AACjD;AACA;AACA;AACA;AACA,CAAC;AACgB;AACjB;AACA;AACA,qCAAqC,uBAAuB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,uBAAuB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,uBAAuB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,mCAAmC,uBAAuB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,UAAU;AAC9E;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,IAAI,KAA+B,EAAE,EAGpC;AACc,iEAAS,EAAC;;;ACtTzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACc,uEAAW,EAAC;;;AC1C3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACe,sFAAiB,EAAC;;;ACZmB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,gCAAiB;AAClD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACe,wFAAkB,EAAC;;;ACrClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACe,kGAAuB,EAAC;;;AC5CvC,IAAI,eAAM,IAAI,SAAI,IAAI,SAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,MAAM,gBAAgB;AACzC;AACA;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA,IAAI,iBAAQ,IAAI,SAAI,IAAI,SAAI;AAC5B,4BAA4B,sBAAsB,qBAAqB,eAAM;AAC7E;AACA;AAC0B;AACsB;AACI;AACiB;AACU;AAC/E,IAAI,qBAAU;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,uBAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAQ,OAAO,iCAAkB;AACxD;AACA;AACA,uBAAuB,iBAAQ,OAAO,sCAAuB;AAC7D;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChgBAAgB,wBAAK,0BAA0B;AAC/C;AACA;AACA;AACA,oBAAoB,KAA0D,EAAE,EAG/D;AACjB;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAS;AAC5C;AACA,aAAa,iRAAiR;AAC9R;AACA;AACA;AACA,gBAAgB,wBAAK,0BAA0B;AAC/C;AACA;AACA;AACA,oBAAoB,KAA0D,EAAE,EAE/D;AACjB;AACA;AACA;AACA,uCAAuC,mBAAS;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa,uKAAuK;AACpL;AACA;AACA,CAAC;AACc,mFAAU,EAAC;;;ACzU1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACc,wDAAM,EAAC;;;AC5BtB;AAAA;AAAA;AAAA;AAAA;AAAoC;AACa;AACE;AACA;AACZ;AACxB;AACf,YAAY,UAAM;AAClB,gBAAgB,UAAU;AAC1B,gBAAgB,qBAAU;AAC1B,gBAAgB,yBAAU;AAC1B,YAAY,aAAM;AAClB,CAAC,EAAC;AAC4D","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"react\")) : factory(root[\"react\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","/**\n * used to loop over and possibly filter entities\n * Accepts either a map of Entities with EntitiyID as Key, or an array\n * if the CB returns true, an array of entities that return true is returned.\n * @param entities\n * @param fn\n * @returns {Array}\n */\nexport default (function (entities, fn) {\n    var ents = [];\n    if (entities.forEach) {\n        entities.forEach(function (ent) {\n            fn(ent) && ents.push(ent);\n        });\n    }\n    else {\n        Object.keys(entities).forEach(function (entID) {\n            fn(entities[entID]) && ents.push(entities[entID]);\n        });\n    }\n    return ents;\n});\n","var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nimport entityLoop from './util/entityLoop';\nvar Group = /** @class */ (function () {\n    function Group(components, entities) {\n        if (entities === void 0) { entities = {}; }\n        this.components = components;\n        this.entities = entities;\n        this.array = [];\n    }\n    return Group;\n}());\nGroup.groups = {};\nGroup.reset = function () {\n    Group.groups = {};\n};\nGroup.generateGroupKey = function (components) {\n    var names = [];\n    for (var count = 0; count < components.length; count++) {\n        var name_1 = components[count];\n        names.push(name_1);\n    }\n    return names\n        .map(function (x) {\n        return x.toLowerCase();\n    })\n        .sort()\n        .join('-');\n};\nGroup.getGroup = function (components) {\n    var key = Group.generateGroupKey(components);\n    return Group.groups[key] || {};\n};\n// this will create a new index group for the provided components.\nGroup.indexGroup = function (compNames, entities) {\n    var compArray = [];\n    if (typeof compNames === 'string') {\n        compArray = [compNames];\n    }\n    else {\n        compArray = compNames;\n    }\n    var key = Group.generateGroupKey(compArray);\n    var group;\n    if (Group.groups[key]) {\n        return;\n    }\n    else {\n        group = Group.groups[key] = new Group(compArray);\n    }\n    // insert the provided entities into this group...\n    entityLoop(entities, function (entity) {\n        if (entity.hasComponents(compArray)) {\n            group.entities[entity.id] = entity;\n            group.array = __spread(group.array, [entity]);\n        }\n    });\n    return group;\n};\nexport default Group;\n// life cycle of a group!\n// 1. Adding a component adds a group with that one component.\n// 2. Adding 2nd component creates a group with that 2nd component\n// 3. Querying for a list of components should create an group for that list, one off.\n// 4. Adding and removing components will update the above lists as needed.\n","var spliceOne = function (arr, index) {\n    if (index === void 0) { index = 0; }\n    var idx = index;\n    var len = arr.length;\n    if (!len || idx >= len) {\n        return;\n    }\n    while (idx < len) {\n        arr[idx] = arr[idx + 1];\n        idx++;\n    }\n    arr.length--;\n};\nexport default spliceOne;\n","import Group from './Group';\nimport entityLoop from './util/entityLoop';\nimport spliceOne from './util/spliceOne';\nvar Entity = /** @class */ (function () {\n    function Entity(classRef) {\n        this.id = Entity.counter;\n        this.constructor = classRef;\n        this.components = {};\n        Entity.entities[this.id] = this;\n        Entity.counter++;\n    }\n    Entity.reset = function () {\n        entityLoop(Entity.entities, function (entity) {\n            entity.destroy();\n        });\n        Group.reset();\n    };\n    ;\n    Entity.getByComps = function (components, type) {\n        if (type === void 0) { type = 'array'; }\n        var compNames = components;\n        Group.indexGroup(components, Entity.entities);\n        var group = Group.getGroup(compNames);\n        return type === 'map' ? group.entities : group.array.concat();\n    };\n    ;\n    Entity.getByComp = function (compName, type) {\n        if (type === void 0) { type = 'array'; }\n        return Entity.getByComps([compName]);\n    };\n    ;\n    Entity.prototype.assignGroup = function (group) {\n        group.entities[this.id] = this;\n    };\n    // A component is added\n    // we create a new group index, for exm\n    Entity.prototype.addComponent = function (component) {\n        this.components[component.name] = component;\n        this[component.name] = component;\n        // creates an index group if it does not exist..\n        var arr = [];\n        for (var compName in this.components) {\n            if (this.components.hasOwnProperty(compName)) {\n                arr.push(compName);\n            }\n        }\n        Group.indexGroup(arr, Entity.entities);\n        // we need to see if we need to add entity into other groups.\n        for (var groupKey in Group.groups) {\n            if (!Group.groups.hasOwnProperty(groupKey)) {\n                continue;\n            }\n            var group = Group.groups[groupKey];\n            // if the ent is in this group, skip.\n            if (group.entities[this.id]) {\n                continue;\n            }\n            // if the component is not in this group, skip.\n            if (group.components.indexOf(component.name) === -1) {\n                continue;\n            }\n            // if this ent does not have all the other comps, skip..\n            if (this.hasComponents(group.components)) {\n                this.assignGroup(group);\n                var newGroup = this.copyArray(group);\n                group.array = this.extendGroup(newGroup);\n            }\n        }\n    };\n    // that's not really copying the array now is it?\n    Entity.prototype.copyArray = function (group) {\n        return group.array;\n    };\n    Entity.prototype.extendGroup = function (newGroup) {\n        newGroup[newGroup.length] = this;\n        return newGroup;\n    };\n    // mixed, an actual component or just component name\n    Entity.prototype.removeComponent = function (comp) {\n        var component = this.components[comp] || comp;\n        var compName = component.name;\n        // we need to see if we need to remove entity from other groups\n        for (var groupKey in Group.groups) {\n            if (!Group.groups.hasOwnProperty(groupKey)) {\n                continue;\n            }\n            var group = Group.groups[groupKey];\n            // if the ent is in this group, skip.\n            var compInGroup = group.components.indexOf(component.name) > -1;\n            var entHasReqComps = this.hasComponents(group.components);\n            // if this ent does not have all the other comps, skip..\n            if (group.entities[this.id] && compInGroup && entHasReqComps) {\n                delete group.entities[this.id];\n                spliceOne(group.array, group.array.indexOf(this));\n            }\n        }\n        delete this.components[compName];\n        delete this[compName];\n    };\n    /**\n     * Destroying an entity means removing all its components and deleting it from the Entity Object\n     */\n    Entity.prototype.destroy = function () {\n        var _this = this;\n        Object.keys(this.components).forEach(function (compName) {\n            _this.removeComponent(_this.components[compName]);\n        });\n        delete Entity.entities[this.id];\n    };\n    Entity.prototype.normalizeToArray = function (compNames) {\n        if (typeof compNames === 'string') {\n            return [compNames];\n        }\n        if (!compNames) {\n            return [];\n        }\n        if (compNames instanceof Array) {\n            return compNames;\n        }\n    };\n    Entity.prototype.hasComponents = function (compNames) {\n        var _this = this;\n        var componentNames = this.normalizeToArray(compNames);\n        if (!compNames) {\n            return false;\n        }\n        // quick breakout if single\n        if (typeof compNames === 'string') {\n            if (this.components[compNames]) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return compNames.reduce(function (agg, compName) {\n                return agg && !!_this.components[compName];\n            }, true);\n        }\n    };\n    Entity.counter = 0;\n    Entity.entities = {};\n    return Entity;\n}());\nwindow.Entity = Entity;\nexport default Entity;\n","var ObjectPool = /** @class */ (function () {\n    function ObjectPool(PooledClass, incrementWhenEmpty) {\n        if (incrementWhenEmpty === void 0) { incrementWhenEmpty = 10; }\n        this.type = PooledClass;\n        this.freePool = [];\n        this.stats = {\n            free: 0,\n            used: 0\n        };\n        this.incrementWhenEmpty = incrementWhenEmpty;\n    }\n    ObjectPool.prototype.reset = function () {\n        this.freePool = [];\n        this.stats = {\n            free: 0,\n            used: 0\n        };\n    };\n    // Ensures the pool has at least $amount of free objects\n    ObjectPool.prototype.generate = function (amount) {\n        var count = amount - this.stats.free > 0 ? amount - this.stats.free : 0;\n        // generate a gazzilion fighters?\n        while (count > 0) {\n            this.freePool.push(new this.type());\n            count--;\n        }\n        this.stats.free = this.freePool.length;\n    };\n    // acquires an object, marks it as 'used'.\n    ObjectPool.prototype.acquire = function () {\n        if (this.freePool.length === 0) {\n            this.generate(this.incrementWhenEmpty);\n        }\n        var obj = this.freePool.pop();\n        this.stats.free = this.freePool.length;\n        return obj;\n    };\n    // releases an object, marks it as free\n    ObjectPool.prototype.release = function (object) {\n        // prevent release twice\n        if (this.freePool.indexOf(object) === -1) {\n            this.freePool.push(object);\n            this.stats.free = this.freePool.length;\n        }\n    };\n    return ObjectPool;\n}());\nexport default ObjectPool;\n","/**\n * Library for working with Canvas,\n * Works by using a 2D context as an argument\n * Provides abstraction for some common shapes in Canvas\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n// TODO we can solve this 'any' but subclassing the different shapes, thus having a full interface per shape\nvar Shape = /** @class */ (function () {\n    function Shape(draw, metaData) {\n        if (metaData === void 0) { metaData = {}; }\n        this.draw = draw;\n        this.metaData = metaData;\n    }\n    return Shape;\n}());\nexport { Shape };\nvar CanvasAPI = /** @class */ (function () {\n    function CanvasAPI(ctx, strokeStyle) {\n        if (strokeStyle === void 0) { strokeStyle = 'white'; }\n        if (!ctx) {\n            throw 'Cannot create layer, no initial context found';\n        }\n        this.layers = {\n            initial: {\n                ctx: ctx,\n                shapes: new Map()\n            }\n        };\n        this.defaultStrokeStyle = strokeStyle;\n        ctx.strokeStyle = strokeStyle;\n    }\n    CanvasAPI.prototype.addLayer = function (name) {\n        var originCanvas = this.layers.initial.ctx.canvas;\n        var parentNode = originCanvas.parentNode;\n        var newCanvas = originCanvas.cloneNode();\n        newCanvas.id = name;\n        parentNode.insertBefore(newCanvas, originCanvas);\n        this.layers[name] = {\n            ctx: newCanvas.getContext('2d'),\n            shapes: new Map()\n        };\n    };\n    CanvasAPI.prototype.removeLayer = function (name) {\n        var originCanvas = this.layers.initial.ctx.canvas;\n        var parentNode = originCanvas.parentNode;\n        parentNode.querySelector(\"#\" + name).remove();\n        delete this.layers[name];\n    };\n    /**\n     * Clears all the shapes\n     */\n    CanvasAPI.prototype.clear = function (layerName) {\n        if (layerName === void 0) { layerName = 'initial'; }\n        var layer = this.layers[layerName];\n        layer.shapes = new Map();\n    };\n    CanvasAPI.prototype.clearAllLayers = function () {\n        for (var layerName in this.layers) {\n            if (!this.layers.hasOwnProperty(layerName)) {\n                continue;\n            }\n            this.clear(layerName);\n        }\n    };\n    /**\n     * Removes a shape by its ID\n     * @param id\n     * @param layerName\n     */\n    CanvasAPI.prototype.remove = function (id, layerName) {\n        if (layerName === void 0) { layerName = 'initial'; }\n        var layer = this.layers[layerName];\n        var shapes = layer.shapes;\n        shapes.delete(id);\n    };\n    /* istanbul ignore next */\n    CanvasAPI.prototype.addImage = function (_a) {\n        var id = _a.id, image = _a.image, // the image to display\n        x = _a.x, y = _a.y, // pos for x,y..\n        height = _a.height, width = _a.width, cropStartX = _a.cropStartX, cropStartY = _a.cropStartY, cropSizeX = _a.cropSizeX, cropSizeY = _a.cropSizeY, rotation = _a.rotation, // in radians\n        _b = _a.layerName, // in radians\n        layerName = _b === void 0 ? 'initial' : _b;\n        var layer = this.layers[layerName];\n        var ctx = layer.ctx;\n        var shapes = layer.shapes;\n        shapes.set(id, new Shape(function () {\n            ctx.beginPath();\n            ctx.save();\n            ctx.translate(x + width / 2, y + height / 2);\n            ctx.rotate(rotation);\n            ctx.drawImage(image, cropStartX, cropStartY, cropSizeX, cropSizeY, -width / 2, -height / 2, // pos in canvas // at the top left of the canvas\n            width, height); // size in canvas\n            ctx.restore();\n            ctx.closePath();\n        }, {\n            id: id,\n            type: 'image',\n            x: x,\n            y: y,\n            height: height,\n            width: width\n        }));\n    };\n    CanvasAPI.prototype.addShape = function (_a) {\n        var id = _a.id, drawFn = _a.drawFn, _b = _a.layerName, layerName = _b === void 0 ? 'initial' : _b;\n        var layer = this.layers[layerName];\n        var ctx = layer.ctx;\n        var shapes = layer.shapes;\n        shapes.set(id, new Shape(function () {\n            drawFn(ctx);\n        }));\n    };\n    CanvasAPI.prototype.writeBubble = function (_a) {\n        var id = _a.id, text = _a.text, backgroundColor = _a.backgroundColor, borderColor = _a.borderColor, borderWidth = _a.borderWidth, fontSize = _a.fontSize, fontColor = _a.fontColor, x = _a.x, y = _a.y, fontFace = _a.fontFace, height = _a.height, width = _a.width, _b = _a.paddingLeft, paddingLeft = _b === void 0 ? 10 : _b, _c = _a.paddingTop, paddingTop = _c === void 0 ? 10 : _c, _d = _a.layerName, layerName = _d === void 0 ? 'initial' : _d;\n        var longestTextWidth = 0;\n        var linesOfText = text.split('\\n');\n        var fontPxSize = fontSize || +this.layers.initial.ctx.font.split('px')[0];\n        var fontToUse = fontFace || +this.layers.initial.ctx.font.split('px')[1];\n        // set it first for text-width calculations\n        this.layers.initial.ctx.font = fontPxSize + \"px \" + fontToUse;\n        for (var i = 0; i < linesOfText.length; i++) {\n            var width_1 = this.layers[layerName].ctx.measureText(linesOfText[i]).width;\n            longestTextWidth = width_1 > longestTextWidth ? width_1 : longestTextWidth;\n        }\n        this.addRect({\n            id: \"\" + id,\n            x: x,\n            y: y,\n            height: Math.max(height, linesOfText.length * fontPxSize + paddingTop * 2),\n            width: Math.max(width, longestTextWidth + paddingLeft * 2 + borderWidth),\n            fillColor: backgroundColor,\n            lineWidth: borderWidth,\n            strokeStyle: borderColor,\n            layerName: layerName\n        });\n        for (var i = 0; i < linesOfText.length; i++) {\n            this.write({\n                id: id + \"-bubbleText-\" + i,\n                text: linesOfText[i],\n                x: x + paddingLeft,\n                y: y + fontPxSize + paddingTop + i * fontPxSize,\n                fillStyle: fontColor,\n                font: fontPxSize + \"px \" + fontToUse,\n                layerName: layerName,\n                textBaseline: null,\n                strokeStyle: null\n            });\n        }\n    };\n    CanvasAPI.prototype.addRect = function (_a) {\n        var id = _a.id, x = _a.x, y = _a.y, width = _a.width, height = _a.height, strokeStyle = _a.strokeStyle, lineWidth = _a.lineWidth, fillColor = _a.fillColor, _b = _a.layerName, layerName = _b === void 0 ? 'initial' : _b;\n        var layer = this.layers[layerName];\n        if (!layer) {\n            throw \"Could not find layer '\" + layerName + \"', are you sure you created the layer?\";\n        }\n        var ctx = layer.ctx;\n        var shapes = layer.shapes;\n        shapes.set(id, new Shape(function () {\n            ctx.strokeStyle = strokeStyle;\n            ctx.lineWidth = lineWidth;\n            ctx.beginPath();\n            ctx.rect(x, y, width, height);\n            if (fillColor) {\n                ctx.fillStyle = fillColor;\n                ctx.fill();\n            }\n            ctx.stroke();\n            ctx.closePath();\n        }, {\n            id: id,\n            type: 'rect',\n            x: x,\n            y: y,\n            height: height,\n            width: width\n        }));\n    };\n    CanvasAPI.prototype.addArc = function (_a) {\n        var id = _a.id, direction = _a.direction, size = _a.size, _b = _a.color, color = _b === void 0 ? 'black' : _b, fillColor = _a.fillColor, _c = _a.lineWidth, lineWidth = _c === void 0 ? 1 : _c, x = _a.x, y = _a.y, radius = _a.radius, _d = _a.layerName, layerName = _d === void 0 ? 'initial' : _d;\n        var layer = this.layers[layerName];\n        var ctx = layer.ctx;\n        var shapes = layer.shapes;\n        shapes.set(id, new Shape(function () {\n            ctx.strokeStyle = color;\n            ctx.lineWidth = lineWidth;\n            var startArc = direction - (size / 2);\n            var endArc = direction + (size / 2);\n            ctx.beginPath();\n            ctx.arc(x, y, radius, startArc * Math.PI, endArc * Math.PI);\n            if (fillColor) {\n                ctx.fillStyle = fillColor;\n                ctx.fill();\n            }\n            ctx.stroke();\n            ctx.closePath();\n        }));\n    };\n    // TODO add interface to this\n    CanvasAPI.prototype.addCircle = function (_a) {\n        var id = _a.id, x = _a.x, y = _a.y, radius = _a.radius, lineWidth = _a.lineWidth, color = _a.color, fillColor = _a.fillColor, _b = _a.layerName, layerName = _b === void 0 ? 'initial' : _b;\n        var layer = this.layers[layerName];\n        var ctx = layer.ctx;\n        var shapes = layer.shapes;\n        shapes.set(id, new Shape(function () {\n            ctx.strokeStyle = color;\n            ctx.lineWidth = lineWidth;\n            ctx.moveTo(x, y);\n            ctx.beginPath();\n            ctx.arc(x, y, radius, 0, Math.PI * 2);\n            if (fillColor) {\n                ctx.fillStyle = fillColor;\n                ctx.fill();\n            }\n            ctx.stroke();\n            ctx.closePath();\n        }, {\n            id: id,\n            type: 'circle',\n            x: x,\n            y: y,\n            radius: radius\n        }));\n    };\n    /**\n     * Method allows us to pan around the canvas\n     */\n    CanvasAPI.prototype.pan = function (x, y) {\n        this.panX = x;\n        this.panY = y;\n        for (var layerName in this.layers) {\n            if (!this.layers.hasOwnProperty(layerName)) {\n                continue;\n            }\n            var layer = this.layers[layerName];\n            var ctx = layer.ctx;\n            ctx.setTransform(1, 0, 0, 1, x, y);\n            // non initial layers are drawn much less often, so we need a manual one here.\n            if (layerName !== 'initial') {\n                this.draw(layerName); // pan requires a draw to all non initial layers\n            }\n        }\n    };\n    CanvasAPI.prototype.getPan = function () {\n        return {\n            panX: this.panX || 0,\n            panY: this.panY || 0,\n        };\n    };\n    CanvasAPI.prototype.write = function (_a) {\n        var id = _a.id, text = _a.text, x = _a.x, y = _a.y, _b = _a.font, font = _b === void 0 ? '' : _b, textBaseline = _a.textBaseline, fillStyle = _a.fillStyle, _c = _a.strokeStyle, strokeStyle = _c === void 0 ? '' : _c, _d = _a.layerName, layerName = _d === void 0 ? 'initial' : _d;\n        var layer = this.layers[layerName];\n        var ctx = layer.ctx;\n        var shapes = layer.shapes;\n        shapes.set(id, new Shape(function () {\n            ctx.beginPath();\n            ctx.font = font;\n            ctx.textBaseline = textBaseline;\n            ctx.fillStyle = fillStyle;\n            ctx.strokeStyle = strokeStyle;\n            ctx.fillText(text, x, y);\n            ctx.closePath();\n        }, {\n            id: id,\n            x: x,\n            y: y\n        }));\n    };\n    CanvasAPI.prototype.draw = function (layerName) {\n        var e_1, _a;\n        if (layerName === void 0) { layerName = 'initial'; }\n        var layer = this.layers[layerName];\n        var ctx = layer.ctx;\n        var shapes = layer.shapes;\n        ctx.save();\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n        ctx.restore();\n        try {\n            for (var _b = __values(shapes.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var shape = _c.value;\n                shape.draw();\n                ctx.strokeStyle = this.defaultStrokeStyle;\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    return CanvasAPI;\n}());\n// adding an image causes segmentation fault for some reason :)\n/* istanbul ignore next */\nif (process.env.NODE_ENV === 'test') {\n    CanvasAPI.prototype.addImage = function () {\n    };\n}\nexport default CanvasAPI;\n","/**\n * Class that represents the current selected area by the user\n * Populated when the user click, holds and move the mouse\n */\nvar SelectedBox = /** @class */ (function () {\n    function SelectedBox() {\n        this.reset();\n    }\n    SelectedBox.prototype.reset = function () {\n        this.start = {\n            x: 0,\n            y: 0\n        };\n        this.end = {\n            x: 0,\n            y: 0\n        };\n    };\n    SelectedBox.prototype.getData = function () {\n        return {\n            start: Object.assign({}, this.start),\n            end: Object.assign({}, this.end),\n            width: this.getWidth(),\n            height: this.getHeight()\n        };\n    };\n    SelectedBox.prototype.getHeight = function () {\n        return this.end.y - this.start.y;\n    };\n    SelectedBox.prototype.getWidth = function () {\n        return this.end.x - this.start.x;\n    };\n    SelectedBox.prototype.setStart = function (x, y) {\n        this.start.x = x;\n        this.start.y = y;\n    };\n    SelectedBox.prototype.setEnd = function (x, y) {\n        this.end.x = x;\n        this.end.y = y;\n    };\n    return SelectedBox;\n}());\nexport default SelectedBox;\n","/**\n * Utility function to detect if a point is inside a circle\n * @param x\n * @param y\n * @param centerX\n * @param centerY\n * @param radius\n * @return {boolean}\n */\nfunction isPosInsideCircle(x, y, centerX, centerY, radius) {\n    return Math.pow((x - centerX), 2) + Math.pow((y - centerY), 2) < Math.pow(radius, 2);\n}\nexport default isPosInsideCircle;\n","import isPosInsideCircle from './isPosInsideCircle';\n/**\n * Function used for getting all shapes hit from a single click (not from a selection box)\n */\nfunction getShapesFromClick(shapes, layerName, x, y) {\n    var hits = [];\n    shapes.forEach(function (shape, id) {\n        if (id === 'selectedBox') {\n            return;\n        }\n        var shapeMetaData = shape.metaData || {};\n        var shapeX = shapeMetaData.x;\n        var shapeY = shapeMetaData.y;\n        var radius = shapeMetaData.radius;\n        var width = shapeMetaData.width;\n        var height = shapeMetaData.height;\n        var type = shapeMetaData.type;\n        if (type === 'circle' && isPosInsideCircle(x, y, shapeX, shapeY, radius)) {\n            hits.push({\n                id: id,\n                layerName: layerName\n            });\n        }\n        else if (type === 'rect' || type === 'image') {\n            if (x >= shapeX && x <= shapeX + width && y >= shapeY && y <= shapeY + height) {\n                hits.push({\n                    id: id,\n                    layerName: layerName\n                });\n                // do nothing, no support for non circles\n            }\n        }\n        else if (type !== 'circle') {\n        }\n    });\n    return hits;\n}\nexport default getShapesFromClick;\n","function getShapesInSelectionBox(shapes, layerName, selectedData) {\n    var minX = Math.min(selectedData.start.x, selectedData.end.x);\n    var maxX = Math.max(selectedData.start.x, selectedData.end.x);\n    var minY = Math.min(selectedData.start.y, selectedData.end.y);\n    var maxY = Math.max(selectedData.start.y, selectedData.end.y);\n    var hits = [];\n    shapes.forEach(function (shape, id) {\n        if (id === 'selectedBox') {\n            return;\n        }\n        var shapeMetaData = shape.metaData || {};\n        var shapeX = shapeMetaData.x;\n        var shapeY = shapeMetaData.y;\n        var radius = shapeMetaData.radius;\n        var width = shapeMetaData.width;\n        var height = shapeMetaData.height;\n        var type = shapeMetaData.type;\n        if (type === 'circle') {\n            var centerX = shapeX;\n            var centerY = shapeY;\n            if (centerX >= minX && centerX <= maxX && centerY >= minY && centerY <= maxY) {\n                hits.push({\n                    id: id,\n                    layerName: layerName\n                });\n            }\n        }\n        else if (type === 'rect' || type === 'image') {\n            // what is considered the 'centerX' for a rect?\n            var centerX = shapeX + width / 2;\n            var centerY = shapeY + height / 2;\n            if (centerX >= minX && centerX <= maxX && centerY >= minY && centerY <= maxY) {\n                hits.push({\n                    id: id,\n                    layerName: layerName\n                });\n            }\n        }\n        else {\n            // do nothing, no support for non circles or rects\n        }\n    });\n    return hits;\n}\nexport default getShapesInSelectionBox;\n","var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nimport React from 'react';\nimport CanvasAPI from 'lib/CanvasAPI/CanvasAPI';\nimport SelectedBox from './SelectedBox/SelectedBox';\nimport getShapesFromClick from './selectionUtils/getShapesFromClick';\nimport getShapesInSelectionBox from './selectionUtils/getShapesInSelectionBox';\nvar GameCanvas = /** @class */ (function () {\n    function GameCanvas(options) {\n        var noop = function () {\n        };\n        this.selectedBoxColor = options.selectedBoxColor || 'blue';\n        this.mapHeight = options.mapHeight;\n        this.mapWidth = options.mapWidth;\n        this.viewHeight = options.viewHeight;\n        this.viewWidth = options.viewWidth;\n        this.onViewMapClick = options.onViewMapClick || noop;\n        this.onViewMapMove = options.onViewMapMove || noop;\n        this.onMiniMapClick = options.onMiniMapClick || noop;\n        this.onMiniMapMove = options.onMiniMapMove || noop;\n        this.enableSelectBox = options.enableSelectBox;\n        this.lastClick = 0;\n        this.isMouseDown = false;\n        this.dbClick = false;\n        this.lastTap = 0;\n        this.selectedBox = new SelectedBox();\n        this.updateViewMapCursorPosition = this.updateViewMapCursorPosition.bind(this);\n        this.updateMiniMapCursorPosition = this.updateMiniMapCursorPosition.bind(this);\n        this.handleMapMouseUp = this.handleMapMouseUp.bind(this);\n        this.handleMapMouseDown = this.handleMapMouseDown.bind(this);\n        this.handleMiniMapClick = this.handleMiniMapClick.bind(this);\n        this.handleMiniMapMove = this.handleMiniMapMove.bind(this);\n        this.handleMapMouseMove = this.handleMapMouseMove.bind(this);\n        this.handleMapMouseLeave = this.handleMapMouseLeave.bind(this);\n        this.handleTouchMove = this.handleTouchMove.bind(this);\n        this.handleTouchStart = this.handleTouchStart.bind(this);\n        this.handleMapTouchEnd = this.handleMapTouchEnd.bind(this);\n        this.handleMiniMapTouchStart = this.handleMiniMapTouchStart.bind(this);\n    }\n    /**\n     * @desc - Gets the x,y position inside the canvas based on a mouse event with clientX and clientY\n     *         Will return X,Y values in relative terms to the painted Canvas dimensions and includes panning\n     * @param clientInputCoordinates\n     * @param canvas\n     * @param canvasAPI\n     */\n    GameCanvas.prototype.getCursorPositionInCanvasTerms = function (clientInputCoordinates, canvas, canvasAPI) {\n        var rect = canvas.getBoundingClientRect();\n        if (typeof clientInputCoordinates.x !== 'number' || typeof clientInputCoordinates.y !== 'number') {\n            throw 'Invalid inputCoordinates provided, missing X or Y';\n        }\n        // X/Y represent the point inside the client view that was touched.\n        // this ignores scrolling, so the top left corner will always be 0,0 no matter the scroll\n        // this X,Y is not yet scaled for canvas\n        var rawXOnCanvasElement = clientInputCoordinates.x - rect.left;\n        var rawYyOnCanvasElement = clientInputCoordinates.y - rect.top;\n        // we need to scale the touch point with the real dimensions.\n        // the HTML element can be 100px wide, but the Canvas within can be 1000px wide.\n        // this ratio will allow us to correctly set the X,Y touch point\n        var WIDTH_RATIO = canvas.width / rect.width;\n        var HEIGHT_RATIO = canvas.height / rect.height;\n        var scaledX = Math.max(0, Math.round(rawXOnCanvasElement * WIDTH_RATIO));\n        var scaledY = Math.max(0, Math.round(rawYyOnCanvasElement * HEIGHT_RATIO));\n        // Now we're in scaled canvas X,Y terms, we can safely subtract the Pan to get the right position\n        var x = scaledX - canvasAPI.getPan().panX;\n        var y = scaledY - canvasAPI.getPan().panY;\n        return { x: x, y: y };\n    };\n    GameCanvas.prototype.handleMapMouseMove = function () {\n        if (this.isMouseDown) {\n            if (this.enableSelectBox === false) {\n                return;\n            }\n            else {\n                this.selectedBox.setEnd(this.lastKnownPositionInCanvasTermsX, this.lastKnownPositionInCanvasTermsY);\n                var data = this.selectedBox.getData();\n                this.mapAPI.addRect({\n                    id: 'selectedBox',\n                    x: data.start.x,\n                    y: data.start.y,\n                    width: data.width,\n                    height: data.height,\n                    strokeStyle: this.selectedBoxColor,\n                    lineWidth: 1,\n                    layerName: 'initial',\n                    fillColor: null\n                });\n            }\n        }\n        this.onViewMapMove({\n            x: this.lastKnownPositionInCanvasTermsX,\n            y: this.lastKnownPositionInCanvasTermsY,\n            isMouseDown: this.isMouseDown,\n            dbClick: this.dbClick,\n            selectedBox: this.selectedBox.getData()\n        });\n    };\n    GameCanvas.prototype.handleMapMouseLeave = function () {\n        if (this.isMouseDown) {\n            this.handleMapMouseUp();\n        }\n    };\n    GameCanvas.prototype.handleMapTouchEnd = function () {\n        var _this = this;\n        this.isMouseDown = false;\n        var selectedData = this.selectedBox.getData();\n        var layers = Object.keys(this.mapAPI.layers);\n        var hits = [];\n        // if a single click...\n        layers.forEach(function (layerName) {\n            if (selectedData.end.x === selectedData.start.x) {\n                var x = _this.lastKnownPositionInCanvasTermsX;\n                var y = _this.lastKnownPositionInCanvasTermsY;\n                hits = __spread(hits, getShapesFromClick(_this.mapAPI.layers[layerName].shapes, layerName, x, y));\n            }\n            else {\n                hits = __spread(hits, getShapesInSelectionBox(_this.mapAPI.layers[layerName].shapes, layerName, selectedData));\n            }\n        });\n        this.mapAPI.addRect({\n            fillColor: null,\n            layerName: \"initial\",\n            lineWidth: 1,\n            strokeStyle: null,\n            id: 'selectedBox',\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        });\n        this.onViewMapClick({\n            x: this.lastKnownPositionInCanvasTermsX,\n            y: this.lastKnownPositionInCanvasTermsY,\n            isMouseDown: this.isMouseDown,\n            dbClick: this.dbTap || this.dbClick,\n            selectedBox: selectedData,\n            hits: hits\n        });\n        this.selectedBox.reset();\n    };\n    GameCanvas.prototype.handleMapMouseUp = function () {\n        if (!this.lastTap) {\n            this.handleMapTouchEnd();\n        }\n    };\n    GameCanvas.prototype.updateViewMapCursorPosition = function (inputCoordinates) {\n        var _a = this.getCursorPositionInCanvasTerms(inputCoordinates, this.viewMapCanvas, this.mapAPI), x = _a.x, y = _a.y;\n        this.lastKnownPositionInCanvasTermsX = x;\n        this.lastKnownPositionInCanvasTermsY = y;\n        return { x: x, y: y };\n    };\n    GameCanvas.prototype.updateMiniMapCursorPosition = function (inputCoordinates) {\n        var _a = this.getCursorPositionInCanvasTerms(inputCoordinates, this.miniMapCanvas, this.miniMapAPI), x = _a.x, y = _a.y;\n        this.miniMapX = x;\n        this.miniMapY = y;\n    };\n    GameCanvas.prototype.getNewCanvasPairs = function (_a) {\n        var getMapRef = _a.getMapRef, getMiniRef = _a.getMiniRef;\n        return {\n            map: this.generateMapCanvas(getMapRef),\n            minimap: this.generateMiniMapCanvas(getMiniRef)\n        };\n    };\n    GameCanvas.prototype.handleMiniMapMove = function (event) {\n        this.onMiniMapMove(event);\n    };\n    GameCanvas.prototype.handleMiniMapClick = function (event) {\n        var x = this.miniMapX;\n        var y = this.miniMapY;\n        // Handle negative overflows, both numbers should be positive\n        // the reason we divide in 2 is because we want to center the view\n        var calcPanX = Math.max(x - this.viewWidth / 2, 0);\n        var calcPanY = Math.max(y - this.viewHeight / 2, 0);\n        // Handle positive overflows, both numbers should not exceed map size\n        var width = this.mapWidth;\n        var height = this.mapHeight;\n        calcPanX = calcPanX + this.viewWidth < width ? calcPanX : width - this.viewWidth;\n        calcPanY = calcPanY + this.viewHeight < height ? calcPanY : height - this.viewHeight;\n        this.mapAPI.pan(-calcPanX, -calcPanY);\n        // draw the minimap square box\n        this.updateMiniMapSquare();\n        this.onMiniMapClick(event);\n    };\n    GameCanvas.prototype.updateMiniMapSquare = function () {\n        this.miniMapAPI.addRect({\n            fillColor: null,\n            layerName: \"initial\",\n            id: 'currentMap',\n            x: -this.mapAPI.getPan().panX,\n            y: -this.mapAPI.getPan().panY,\n            width: this.viewWidth,\n            height: this.viewHeight,\n            strokeStyle: 'green',\n            lineWidth: 20\n        });\n    };\n    GameCanvas.prototype.handleMapMouseDown = function () {\n        if (!this.lastTap) {\n            var now = new Date().getTime();\n            this.dbClick = (now - this.lastClick) < 300;\n            this.lastClick = now;\n            this.isMouseDown = true;\n            this.setSelectBox();\n        }\n    };\n    GameCanvas.prototype.setSelectBox = function () {\n        if (this.enableSelectBox === false) {\n            return;\n        }\n        this.selectedBox.setStart(this.lastKnownPositionInCanvasTermsX, this.lastKnownPositionInCanvasTermsY);\n        this.selectedBox.setEnd(this.lastKnownPositionInCanvasTermsX, this.lastKnownPositionInCanvasTermsY);\n    };\n    GameCanvas.prototype.handleTouchStart = function (e) {\n        var coords = {\n            x: e.touches[0].clientX,\n            y: e.touches[0].clientY\n        };\n        this.updateViewMapCursorPosition(coords);\n        var _a = this.getCursorPositionInCanvasTerms(coords, this.viewMapCanvas, this.mapAPI), x = _a.x, y = _a.y;\n        var now = new Date().getTime();\n        this.dbTap = (now - this.lastTap) < 300;\n        this.lastTap = now;\n        this.setSelectBox();\n    };\n    GameCanvas.prototype.handleMiniMapTouchStart = function (e) {\n        var coords = {\n            x: e.touches[0].clientX,\n            y: e.touches[0].clientY\n        };\n        var _a = this.getCursorPositionInCanvasTerms(coords, this.miniMapCanvas, this.miniMapAPI), x = _a.x, y = _a.y;\n        this.miniMapX = x;\n        this.miniMapY = y;\n        this.handleMiniMapClick(e);\n    };\n    GameCanvas.prototype.ensureNegative = function (a) {\n        return Math.min(a, 0);\n    };\n    // Clicking / Touching the minimap should pan the main view\n    GameCanvas.prototype.handleTouchMove = function (e) {\n        e.preventDefault();\n        // Canvas terms include\n        var coords = {\n            x: e.touches[0].clientX,\n            y: e.touches[0].clientY\n        };\n        var _a = this.getCursorPositionInCanvasTerms(coords, this.viewMapCanvas, this.mapAPI), x = _a.x, y = _a.y;\n        var _b = this.mapAPI.getPan(), currentPanX = _b.panX, currentPanY = _b.panY;\n        // example: current is 5, lastKnown is 20, we moved -15.\n        var xPxChange = x - this.lastKnownPositionInCanvasTermsX;\n        var yPxChange = y - this.lastKnownPositionInCanvasTermsY;\n        // the new pan is the current pan + the change in movement\n        var plannedNewPanX = currentPanX + xPxChange;\n        var plannedNewPanY = currentPanY + yPxChange;\n        // We must ensure we don't escape from the bottom-right\n        var IS_PANNING_CONTAINED_WITHIN_MAP_FOR_X = plannedNewPanX + this.viewWidth < this.mapWidth;\n        var IS_PANNING_CONTAINED_WITHIN_MAP_FOR_Y = plannedNewPanY + this.viewWidth < this.mapHeight;\n        // Max allowed panning will ensure we can't over-pan on the bottom right\n        var MAX_ALLOWED_X_PANNING = this.viewWidth - this.mapWidth;\n        var MAX_ALLOWED_Y_PANNING = this.viewHeight - this.mapHeight;\n        var newPanX = IS_PANNING_CONTAINED_WITHIN_MAP_FOR_X ? plannedNewPanX : MAX_ALLOWED_X_PANNING;\n        var newPanY = IS_PANNING_CONTAINED_WITHIN_MAP_FOR_Y ? plannedNewPanY : MAX_ALLOWED_Y_PANNING;\n        // SAFETY\n        // our panning is always negative, as don't allow to scroll off the edges\n        // (if panning could be positive, we the canvas edge would be in the mainView)\n        // This is equal to MIN_ALLOWED_X_PANNING = 0;\n        this.mapAPI.pan(this.ensureNegative(newPanX), this.ensureNegative(newPanY));\n    };\n    GameCanvas.prototype.generateMapCanvas = function (getRef) {\n        var _this = this;\n        return (React.createElement(\"canvas\", { className: 'viewMap', ref: function (el) {\n                if (!el) {\n                    return null;\n                }\n                if (process.env.NODE_ENV === 'test' && !el.removeEventListener) {\n                    // @ts-ignore\n                    el = el._reactInternalFiber.child.stateNode; // eslint-disable-line\n                }\n                _this.viewMapCanvas = el;\n                document.removeEventListener('mousemove', _this.updateViewMapCursorPosition);\n                document.addEventListener('mousemove', _this.updateViewMapCursorPosition);\n                el.removeEventListener('touchmove', _this.handleTouchMove, false);\n                el.addEventListener('touchmove', _this.handleTouchMove, false);\n                _this.mapAPI = new CanvasAPI(el.getContext('2d'));\n                getRef(_this.mapAPI, el);\n            }, height: this.viewHeight, width: this.viewWidth, onMouseDown: this.handleMapMouseDown, onTouchStart: this.handleTouchStart, onTouchEnd: this.handleMapTouchEnd, onMouseMove: this.handleMapMouseMove, onMouseUp: this.handleMapMouseUp, onMouseLeave: this.handleMapMouseLeave }));\n    };\n    GameCanvas.prototype.generateMiniMapCanvas = function (getRef) {\n        var _this = this;\n        return (React.createElement(\"canvas\", { className: 'minimap', ref: function (el) {\n                if (!el) {\n                    return null;\n                }\n                if (process.env.NODE_ENV === 'test' && !el.removeEventListener) {\n                    el = el._reactInternalFiber.child.stateNode; // eslint-disable-line\n                }\n                _this.miniMapCanvas = el;\n                document.removeEventListener('mousemove', _this.updateMiniMapCursorPosition);\n                document.addEventListener('mousemove', _this.updateMiniMapCursorPosition);\n                _this.miniMapAPI = new CanvasAPI(el.getContext('2d'));\n                // TODO - what? why? is this needed?\n                var key = setInterval(function () {\n                    if (_this.mapAPI) {\n                        _this.updateMiniMapSquare();\n                        clearInterval(key);\n                    }\n                }, 100);\n                getRef(_this.miniMapAPI, el);\n            }, height: this.mapHeight, width: this.mapWidth, onMouseMove: this.handleMiniMapMove, onMouseDown: this.handleMiniMapClick, onTouchStart: this.handleMiniMapTouchStart }));\n    };\n    return GameCanvas;\n}());\nexport default GameCanvas;\n","var Engine = /** @class */ (function () {\n    function Engine() {\n        this.systems = [];\n        this.frameID = null;\n    }\n    Engine.prototype.addSystem = function (system) {\n        this.systems.push(system);\n    };\n    Engine.prototype.run = function (sysArgs) {\n        var _this = this;\n        this.frameID = requestAnimationFrame(function () {\n            _this.run(sysArgs); // // Load the next frame request, this will allow any system to cancel the frame\n            var systemArguments = typeof sysArgs === 'function' ? sysArgs() : sysArgs;\n            _this.runSystems(systemArguments);\n        });\n        return this.frameID;\n    };\n    Engine.prototype.runSystems = function (systemArguments) {\n        for (var i = 0; i < this.systems.length; i++) {\n            this.systems[i](systemArguments);\n        }\n    };\n    Engine.prototype.stop = function () {\n        cancelAnimationFrame(this.frameID);\n        return this.frameID;\n    };\n    return Engine;\n}());\nexport default Engine;\n","import Entity from 'lib/ECS/Entity';\nimport entityLoop from 'lib/ECS/util/entityLoop';\nimport ObjectPool from 'lib/ObjectPool/ObjectPool';\nimport GameCanvas from 'lib/GameCanvas/GameCanvas';\nimport Engine from 'lib/Engine/Engine';\nexport default {\n    Entity: Entity,\n    entityLoop: entityLoop,\n    ObjectPool: ObjectPool,\n    GameCanvas: GameCanvas,\n    Engine: Engine\n};\nexport { Entity, entityLoop, ObjectPool, GameCanvas, Engine };\n"],"sourceRoot":""}